{"ast":null,"code":"var _jsxFileName = \"/Users/ihzaan/Documents/GitHub/EV-Connect/frontend/src/components/NearByStations.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\nimport \"../styles/NearByStations.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst NearbyStations = () => {\n  _s();\n  const [userLocation, setUserLocation] = useState(null);\n  const [stations, setStations] = useState([]);\n  const [nearbyStations, setNearbyStations] = useState([]);\n  const navigate = useNavigate();\n  const RADIUS_KM = 5; // Search radius for nearby stations\n\n  useEffect(() => {\n    getUserLocation();\n  }, []);\n\n  // Get User's Current Location (Forces fresh location fetch)\n  const getUserLocation = () => {\n    if (\"geolocation\" in navigator) {\n      navigator.geolocation.getCurrentPosition(position => {\n        const {\n          latitude,\n          longitude\n        } = position.coords;\n        setUserLocation({\n          latitude,\n          longitude\n        });\n        fetchStations(latitude, longitude);\n      }, error => {\n        console.error(\"Error getting location:\", error);\n        alert(\"Please enable location services.\");\n      }, {\n        enableHighAccuracy: true\n      } // Ensures fresh location data\n      );\n    } else {\n      alert(\"Geolocation is not supported by your browser.\");\n    }\n  };\n\n  // Fetch Charging Stations from Database\n  const fetchStations = async (userLat, userLng) => {\n    try {\n      const response = await fetch(\"http://localhost:5006/api/stations/view\");\n      const data = await response.json();\n      setStations(data);\n\n      // Filter Nearby Stations & Include Distance\n      const filteredStations = data.map(station => {\n        const distance = parseFloat(calculateDistance(userLat, userLng, station.latitude, station.longitude).toFixed(3));\n        return {\n          ...station,\n          distance\n        }; // Add distance to the station object\n      }).filter(station => station.distance <= RADIUS_KM);\n      setNearbyStations(filteredStations);\n    } catch (error) {\n      console.error(\"Error fetching stations:\", error);\n    }\n  };\n\n  // Haversine Formula to Calculate Distance Between Two Coordinates\n  const calculateDistance = (lat1, lon1, lat2, lon2) => {\n    const toRad = angle => angle * Math.PI / 180;\n    const R = 6371; // Earthâ€™s radius in km\n    const dLat = toRad(lat2 - lat1);\n    const dLon = toRad(lon2 - lon1);\n    const a = Math.sin(dLat / 2) * Math.sin(dLat / 2) + Math.cos(toRad(lat1)) * Math.cos(toRad(lat2)) * Math.sin(dLon / 2) * Math.sin(dLon / 2);\n    const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\n    return R * c; // Distance in km\n  };\n\n  // Handle Booking Button Click\n  const handleBook = stationId => {\n    navigate(`/book/${stationId}`);\n  };\n\n  // Handle Direction Button Click (Now includes the correct \"from\" location)\n  const handleDirection = (latitude, longitude) => {\n    if (!userLocation) {\n      alert(\"User location not available. Please enable location services.\");\n      return;\n    }\n    const {\n      latitude: userLat,\n      longitude: userLng\n    } = userLocation;\n    window.open(`https://www.google.com/maps/dir/?api=1&origin=${userLat},${userLng}&destination=${latitude},${longitude}`, \"_blank\");\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"-container\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"nearby-stations-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Nearby Charging Stations\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 9\n      }, this), userLocation ? /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Your Location: \", userLocation.latitude, \", \", userLocation.longitude]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Fetching location...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        className: \"stations-list\",\n        children: nearbyStations.length > 0 ? nearbyStations.map(station => /*#__PURE__*/_jsxDEV(\"li\", {\n          className: \"station-item\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"station-info\",\n            children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n              children: station.name\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 108,\n              columnNumber: 19\n            }, this), \" - \", station.distance.toFixed(3), \" km away\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 107,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"station-buttons\",\n            children: [/*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"direction-btnn\",\n              onClick: () => handleDirection(station.latitude, station.longitude),\n              children: \"\\u279C Directions\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 111,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"book-btn\",\n              onClick: () => handleBook(station._id),\n              children: \"Book\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 114,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 110,\n            columnNumber: 17\n          }, this)]\n        }, station._id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 106,\n          columnNumber: 15\n        }, this)) : /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"No charging stations found within \", RADIUS_KM, \" km.\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 119,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 94,\n    columnNumber: 5\n  }, this);\n};\n_s(NearbyStations, \"g0ReGOmEW3bcAl/EQYh6feAHqiY=\", false, function () {\n  return [useNavigate];\n});\n_c = NearbyStations;\nexport default NearbyStations;\nvar _c;\n$RefreshReg$(_c, \"NearbyStations\");","map":{"version":3,"names":["React","useState","useEffect","useNavigate","jsxDEV","_jsxDEV","NearbyStations","_s","userLocation","setUserLocation","stations","setStations","nearbyStations","setNearbyStations","navigate","RADIUS_KM","getUserLocation","navigator","geolocation","getCurrentPosition","position","latitude","longitude","coords","fetchStations","error","console","alert","enableHighAccuracy","userLat","userLng","response","fetch","data","json","filteredStations","map","station","distance","parseFloat","calculateDistance","toFixed","filter","lat1","lon1","lat2","lon2","toRad","angle","Math","PI","R","dLat","dLon","a","sin","cos","c","atan2","sqrt","handleBook","stationId","handleDirection","window","open","className","children","fileName","_jsxFileName","lineNumber","columnNumber","length","name","onClick","_id","_c","$RefreshReg$"],"sources":["/Users/ihzaan/Documents/GitHub/EV-Connect/frontend/src/components/NearByStations.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\nimport \"../styles/NearByStations.css\";\n\nconst NearbyStations = () => {\n  const [userLocation, setUserLocation] = useState(null);\n  const [stations, setStations] = useState([]);\n  const [nearbyStations, setNearbyStations] = useState([]);\n  const navigate = useNavigate();\n  const RADIUS_KM = 5; // Search radius for nearby stations\n\n  useEffect(() => {\n    getUserLocation();\n  }, []);\n\n  // Get User's Current Location (Forces fresh location fetch)\n  const getUserLocation = () => {\n    if (\"geolocation\" in navigator) {\n      navigator.geolocation.getCurrentPosition(\n        (position) => {\n          const { latitude, longitude } = position.coords;\n          setUserLocation({ latitude, longitude });\n          fetchStations(latitude, longitude);\n        },\n        (error) => {\n          console.error(\"Error getting location:\", error);\n          alert(\"Please enable location services.\");\n        },\n        { enableHighAccuracy: true } // Ensures fresh location data\n      );\n    } else {\n      alert(\"Geolocation is not supported by your browser.\");\n    }\n  };\n\n  // Fetch Charging Stations from Database\n  const fetchStations = async (userLat, userLng) => {\n    try {\n      const response = await fetch(\"http://localhost:5006/api/stations/view\");\n      const data = await response.json();\n      setStations(data);\n\n      // Filter Nearby Stations & Include Distance\n      const filteredStations = data\n        .map((station) => {\n          const distance = parseFloat(\n            calculateDistance(userLat, userLng, station.latitude, station.longitude).toFixed(3)\n          );\n          return { ...station, distance }; // Add distance to the station object\n        })\n        .filter((station) => station.distance <= RADIUS_KM);\n\n      setNearbyStations(filteredStations);\n    } catch (error) {\n      console.error(\"Error fetching stations:\", error);\n    }\n  };\n\n  // Haversine Formula to Calculate Distance Between Two Coordinates\n  const calculateDistance = (lat1, lon1, lat2, lon2) => {\n    const toRad = (angle) => (angle * Math.PI) / 180;\n    const R = 6371; // Earthâ€™s radius in km\n    const dLat = toRad(lat2 - lat1);\n    const dLon = toRad(lon2 - lon1);\n    const a =\n      Math.sin(dLat / 2) * Math.sin(dLat / 2) +\n      Math.cos(toRad(lat1)) * Math.cos(toRad(lat2)) *\n      Math.sin(dLon / 2) * Math.sin(dLon / 2);\n    const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\n\n    return R * c; // Distance in km\n  };\n\n  // Handle Booking Button Click\n  const handleBook = (stationId) => {\n    navigate(`/book/${stationId}`);\n  };\n\n  // Handle Direction Button Click (Now includes the correct \"from\" location)\n  const handleDirection = (latitude, longitude) => {\n    if (!userLocation) {\n      alert(\"User location not available. Please enable location services.\");\n      return;\n    }\n\n    const { latitude: userLat, longitude: userLng } = userLocation;\n    window.open(\n      `https://www.google.com/maps/dir/?api=1&origin=${userLat},${userLng}&destination=${latitude},${longitude}`,\n      \"_blank\"\n    );\n  };\n\n  return (\n    <div className=\"-container\">\n      <div className=\"nearby-stations-container\">\n        <h2>Nearby Charging Stations</h2>\n        {userLocation ? (\n          <p>Your Location: {userLocation.latitude}, {userLocation.longitude}</p>\n        ) : (\n          <p>Fetching location...</p>\n        )}\n\n        <ul className=\"stations-list\">\n          {nearbyStations.length > 0 ? (\n            nearbyStations.map((station) => (\n              <li key={station._id} className=\"station-item\">\n                <div className=\"station-info\">\n                  <strong>{station.name}</strong> - {station.distance.toFixed(3)} km away\n                </div>\n                <div className=\"station-buttons\">\n                  <button className=\"direction-btnn\" onClick={() => handleDirection(station.latitude, station.longitude)}>\n                    âžœ Directions\n                  </button>\n                  <button className=\"book-btn\" onClick={() => handleBook(station._id)}>Book</button>\n                </div>\n              </li>\n            ))\n          ) : (\n            <p>No charging stations found within {RADIUS_KM} km.</p>\n          )}\n        </ul>\n      </div>\n    </div>\n  );\n };\n\nexport default NearbyStations;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}