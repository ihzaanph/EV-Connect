{"ast":null,"code":"var _jsxFileName = \"/Users/ihzaan/Documents/GitHub/EV-Connect/frontend/src/components/ViewstationEVuser.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport { GoogleMap, LoadScript, Marker, InfoWindow } from \"@react-google-maps/api\";\nimport \"../styles/ViewstaEVuser.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ViewStations = () => {\n  _s();\n  const [stations, setStations] = useState([]);\n  const [selectedStation, setSelectedStation] = useState(null);\n  const [userLocation, setUserLocation] = useState(null);\n  const [isApiLoaded, setIsApiLoaded] = useState(false); // Ensure API is loaded\n\n  useEffect(() => {\n    fetchStations();\n    getUserLocation();\n  }, []);\n\n  // Fetch Charging Stations\n  const fetchStations = async () => {\n    try {\n      const response = await fetch(\"http://localhost:5006/api/charging-stations-evuser\");\n      const data = await response.json();\n      setStations(data);\n    } catch (error) {\n      console.error(\"Error fetching stations:\", error);\n    }\n  };\n\n  // Get User's Current Location\n  const getUserLocation = () => {\n    if (navigator.geolocation) {\n      navigator.geolocation.getCurrentPosition(position => {\n        setUserLocation({\n          lat: position.coords.latitude,\n          lng: position.coords.longitude\n        });\n      }, error => {\n        console.error(\"Error getting user location:\", error);\n      });\n    } else {\n      console.error(\"Geolocation is not supported by this browser.\");\n    }\n  };\n\n  // Open Google Maps for Directions\n  const openGoogleMaps = (lat, lng) => {\n    if (userLocation) {\n      const url = `https://www.google.com/maps/dir/?api=1&origin=${userLocation.lat},${userLocation.lng}&destination=${lat},${lng}&travelmode=driving`;\n      window.open(url, \"_blank\");\n    } else {\n      alert(\"Unable to get your location.\");\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"view-stations-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Find Nearby Charging Stations\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"map-box\",\n      children: /*#__PURE__*/_jsxDEV(LoadScript, {\n        googleMapsApiKey: \"YOUR_GOOGLE_MAPS_API_KEY\",\n        onLoad: () => setIsApiLoaded(true) // Set API loaded state\n        ,\n        children: isApiLoaded && /*#__PURE__*/_jsxDEV(GoogleMap, {\n          mapContainerClassName: \"map-container\",\n          center: userLocation || {\n            lat: 10.0,\n            lng: 76.0\n          } // Default center if user location is unavailable\n          ,\n          zoom: 10,\n          children: [userLocation && /*#__PURE__*/_jsxDEV(Marker, {\n            position: userLocation,\n            icon: {\n              url: \"http://maps.google.com/mapfiles/ms/icons/blue-dot.png\",\n              scaledSize: new google.maps.Size(40, 40) // FIXED HERE\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 72,\n            columnNumber: 17\n          }, this), stations.map(station => /*#__PURE__*/_jsxDEV(Marker, {\n            position: {\n              lat: station.latitude,\n              lng: station.longitude\n            },\n            onClick: () => setSelectedStation(station)\n          }, station._id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 83,\n            columnNumber: 17\n          }, this)), selectedStation && /*#__PURE__*/_jsxDEV(InfoWindow, {\n            position: {\n              lat: selectedStation.latitude,\n              lng: selectedStation.longitude\n            },\n            onCloseClick: () => setSelectedStation(null),\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"info-window\",\n              children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n                children: selectedStation.name\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 97,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                children: [\"Status:\", \" \", /*#__PURE__*/_jsxDEV(\"span\", {\n                  className: selectedStation.operationalStatus === \"active\" ? \"active\" : \"inactive\",\n                  children: selectedStation.operationalStatus\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 100,\n                  columnNumber: 23\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 98,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                className: \"direction-btn\",\n                onClick: () => openGoogleMaps(selectedStation.latitude, selectedStation.longitude),\n                children: \"Get Directions\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 110,\n                columnNumber: 21\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 96,\n              columnNumber: 19\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 92,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 65,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 57,\n    columnNumber: 5\n  }, this);\n};\n_s(ViewStations, \"YJd/NvJqvhf4ABE9Futhq5oxqZU=\");\n_c = ViewStations;\nexport default ViewStations;\nvar _c;\n$RefreshReg$(_c, \"ViewStations\");","map":{"version":3,"names":["React","useState","useEffect","GoogleMap","LoadScript","Marker","InfoWindow","jsxDEV","_jsxDEV","ViewStations","_s","stations","setStations","selectedStation","setSelectedStation","userLocation","setUserLocation","isApiLoaded","setIsApiLoaded","fetchStations","getUserLocation","response","fetch","data","json","error","console","navigator","geolocation","getCurrentPosition","position","lat","coords","latitude","lng","longitude","openGoogleMaps","url","window","open","alert","className","children","fileName","_jsxFileName","lineNumber","columnNumber","googleMapsApiKey","onLoad","mapContainerClassName","center","zoom","icon","scaledSize","google","maps","Size","map","station","onClick","_id","onCloseClick","name","operationalStatus","_c","$RefreshReg$"],"sources":["/Users/ihzaan/Documents/GitHub/EV-Connect/frontend/src/components/ViewstationEVuser.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { GoogleMap, LoadScript, Marker, InfoWindow } from \"@react-google-maps/api\";\nimport \"../styles/ViewstaEVuser.css\";\n\nconst ViewStations = () => {\n  const [stations, setStations] = useState([]);\n  const [selectedStation, setSelectedStation] = useState(null);\n  const [userLocation, setUserLocation] = useState(null);\n  const [isApiLoaded, setIsApiLoaded] = useState(false); // Ensure API is loaded\n\n  useEffect(() => {\n    fetchStations();\n    getUserLocation();\n  }, []);\n\n  // Fetch Charging Stations\n  const fetchStations = async () => {\n    try {\n      const response = await fetch(\"http://localhost:5006/api/charging-stations-evuser\");\n      const data = await response.json();\n      setStations(data);\n    } catch (error) {\n      console.error(\"Error fetching stations:\", error);\n    }\n  };\n\n  // Get User's Current Location\n  const getUserLocation = () => {\n    if (navigator.geolocation) {\n      navigator.geolocation.getCurrentPosition(\n        (position) => {\n          setUserLocation({\n            lat: position.coords.latitude,\n            lng: position.coords.longitude,\n          });\n        },\n        (error) => {\n          console.error(\"Error getting user location:\", error);\n        }\n      );\n    } else {\n      console.error(\"Geolocation is not supported by this browser.\");\n    }\n  };\n\n  // Open Google Maps for Directions\n  const openGoogleMaps = (lat, lng) => {\n    if (userLocation) {\n      const url = `https://www.google.com/maps/dir/?api=1&origin=${userLocation.lat},${userLocation.lng}&destination=${lat},${lng}&travelmode=driving`;\n      window.open(url, \"_blank\");\n    } else {\n      alert(\"Unable to get your location.\");\n    }\n  };\n\n  return (\n    <div className=\"view-stations-container\">\n      <h2>Find Nearby Charging Stations</h2>\n      <div className=\"map-box\">\n        <LoadScript\n          googleMapsApiKey=\"YOUR_GOOGLE_MAPS_API_KEY\"\n          onLoad={() => setIsApiLoaded(true)} // Set API loaded state\n        >\n          {isApiLoaded && (\n            <GoogleMap\n              mapContainerClassName=\"map-container\"\n              center={userLocation || { lat: 10.0, lng: 76.0 }} // Default center if user location is unavailable\n              zoom={10}\n            >\n              {/* User's Location Marker */}\n              {userLocation && (\n                <Marker\n                  position={userLocation}\n                  icon={{\n                    url: \"http://maps.google.com/mapfiles/ms/icons/blue-dot.png\",\n                    scaledSize: new google.maps.Size(40, 40), // FIXED HERE\n                  }}\n                />\n              )}\n\n              {/* Charging Station Markers */}\n              {stations.map((station) => (\n                <Marker\n                  key={station._id}\n                  position={{ lat: station.latitude, lng: station.longitude }}\n                  onClick={() => setSelectedStation(station)}\n                />\n              ))}\n\n              {/* Info Window for Selected Station */}\n              {selectedStation && (\n                <InfoWindow\n                  position={{ lat: selectedStation.latitude, lng: selectedStation.longitude }}\n                  onCloseClick={() => setSelectedStation(null)}\n                >\n                  <div className=\"info-window\">\n                    <h4>{selectedStation.name}</h4>\n                    <p>\n                      Status:{\" \"}\n                      <span\n                        className={\n                          selectedStation.operationalStatus === \"active\"\n                            ? \"active\"\n                            : \"inactive\"\n                        }\n                      >\n                        {selectedStation.operationalStatus}\n                      </span>\n                    </p>\n                    <button\n                      className=\"direction-btn\"\n                      onClick={() =>\n                        openGoogleMaps(\n                          selectedStation.latitude,\n                          selectedStation.longitude\n                        )\n                      }\n                    >\n                      Get Directions\n                    </button>\n                  </div>\n                </InfoWindow>\n              )}\n            </GoogleMap>\n          )}\n        </LoadScript>\n      </div>\n    </div>\n  );\n};\n\nexport default ViewStations;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}