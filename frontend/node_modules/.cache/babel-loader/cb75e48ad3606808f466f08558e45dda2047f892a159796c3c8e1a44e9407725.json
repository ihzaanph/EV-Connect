{"ast":null,"code":"var _jsxFileName = \"/Users/ihzaan/Documents/GitHub/EV-Connect/frontend/src/components/StationMap.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport { GoogleMap, LoadScript, Marker, DirectionsService, DirectionsRenderer } from \"@react-google-maps/api\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst API_KEY = \"AIzaSyDBV2MEqsDJEKoWSWF8q3feg-_-_7CxHhE\"; // Replace with your API Key\n\nconst mapContainerStyle = {\n  width: \"100%\",\n  height: \"700px\"\n};\nconst center = {\n  lat: 10.0,\n  lng: 76.0\n}; // Default center\n\nconst stations = [{\n  id: 1,\n  name: \"Station 1\",\n  lat: 10.01,\n  lng: 76.10\n}, {\n  id: 2,\n  name: \"Station 2\",\n  lat: 10.05,\n  lng: 76.15\n}, {\n  id: 3,\n  name: \"Station 3\",\n  lat: 10.10,\n  lng: 76.20\n}];\nconst StationMap = () => {\n  _s();\n  const [currentLocation, setCurrentLocation] = useState(null);\n  const [selectedStation, setSelectedStation] = useState(null);\n  const [directions, setDirections] = useState(null);\n\n  // Get user's current location\n  useEffect(() => {\n    if (navigator.geolocation) {\n      navigator.geolocation.getCurrentPosition(position => {\n        setCurrentLocation({\n          lat: position.coords.latitude,\n          lng: position.coords.longitude\n        });\n      }, error => console.error(\"Error getting location:\", error));\n    }\n  }, []);\n  const handleStationClick = station => {\n    setSelectedStation(station);\n  };\n  return /*#__PURE__*/_jsxDEV(LoadScript, {\n    googleMapsApiKey: API_KEY,\n    children: /*#__PURE__*/_jsxDEV(GoogleMap, {\n      mapContainerStyle: mapContainerStyle,\n      center: center,\n      zoom: 12,\n      children: [currentLocation && /*#__PURE__*/_jsxDEV(Marker, {\n        position: currentLocation,\n        label: \"You\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 11\n      }, this), stations.map(station => /*#__PURE__*/_jsxDEV(Marker, {\n        position: {\n          lat: station.lat,\n          lng: station.lng\n        },\n        label: station.name,\n        onClick: () => handleStationClick(station)\n      }, station.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 11\n      }, this)), selectedStation && currentLocation && /*#__PURE__*/_jsxDEV(DirectionsService, {\n        options: {\n          destination: {\n            lat: selectedStation.lat,\n            lng: selectedStation.lng\n          },\n          origin: currentLocation,\n          travelMode: \"DRIVING\"\n        },\n        callback: (result, status) => {\n          if (status === \"OK\") {\n            setDirections(result);\n          } else {\n            console.error(\"Error fetching directions:\", status);\n          }\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 11\n      }, this), directions && /*#__PURE__*/_jsxDEV(DirectionsRenderer, {\n        directions: directions\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 24\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 44,\n    columnNumber: 5\n  }, this);\n};\n_s(StationMap, \"TPhZIXGZhr55Dyl2LonOyxjEp/A=\");\n_c = StationMap;\nexport default StationMap;\nvar _c;\n$RefreshReg$(_c, \"StationMap\");","map":{"version":3,"names":["React","useState","useEffect","GoogleMap","LoadScript","Marker","DirectionsService","DirectionsRenderer","jsxDEV","_jsxDEV","API_KEY","mapContainerStyle","width","height","center","lat","lng","stations","id","name","StationMap","_s","currentLocation","setCurrentLocation","selectedStation","setSelectedStation","directions","setDirections","navigator","geolocation","getCurrentPosition","position","coords","latitude","longitude","error","console","handleStationClick","station","googleMapsApiKey","children","zoom","label","fileName","_jsxFileName","lineNumber","columnNumber","map","onClick","options","destination","origin","travelMode","callback","result","status","_c","$RefreshReg$"],"sources":["/Users/ihzaan/Documents/GitHub/EV-Connect/frontend/src/components/StationMap.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { GoogleMap, LoadScript, Marker, DirectionsService, DirectionsRenderer } from \"@react-google-maps/api\";\n\nconst API_KEY = \"AIzaSyDBV2MEqsDJEKoWSWF8q3feg-_-_7CxHhE\"; // Replace with your API Key\n\nconst mapContainerStyle = {\n  width: \"100%\",\n  height: \"700px\",\n};\n\nconst center = { lat: 10.0, lng: 76.0 }; // Default center\n\nconst stations = [\n  { id: 1, name: \"Station 1\", lat: 10.01, lng: 76.10 },\n  { id: 2, name: \"Station 2\", lat: 10.05, lng: 76.15 },\n  { id: 3, name: \"Station 3\", lat: 10.10, lng: 76.20 },\n];\n\nconst StationMap = () => {\n  const [currentLocation, setCurrentLocation] = useState(null);\n  const [selectedStation, setSelectedStation] = useState(null);\n  const [directions, setDirections] = useState(null);\n\n  // Get user's current location\n  useEffect(() => {\n    if (navigator.geolocation) {\n      navigator.geolocation.getCurrentPosition(\n        (position) => {\n          setCurrentLocation({\n            lat: position.coords.latitude,\n            lng: position.coords.longitude,\n          });\n        },\n        (error) => console.error(\"Error getting location:\", error)\n      );\n    }\n  }, []);\n\n  const handleStationClick = (station) => {\n    setSelectedStation(station);\n  };\n\n  return (\n    <LoadScript googleMapsApiKey={API_KEY}>\n      <GoogleMap mapContainerStyle={mapContainerStyle} center={center} zoom={12}>\n        {/* Mark current location */}\n        {currentLocation && (\n          <Marker position={currentLocation} label=\"You\" />\n        )}\n\n        {/* Mark charging stations */}\n        {stations.map((station) => (\n          <Marker\n            key={station.id}\n            position={{ lat: station.lat, lng: station.lng }}\n            label={station.name}\n            onClick={() => handleStationClick(station)}\n          />\n        ))}\n\n        {/* Get directions when a station is clicked */}\n        {selectedStation && currentLocation && (\n          <DirectionsService\n            options={{\n              destination: { lat: selectedStation.lat, lng: selectedStation.lng },\n              origin: currentLocation,\n              travelMode: \"DRIVING\",\n            }}\n            callback={(result, status) => {\n              if (status === \"OK\") {\n                setDirections(result);\n              } else {\n                console.error(\"Error fetching directions:\", status);\n              }\n            }}\n          />\n        )}\n\n        {/* Render directions */}\n        {directions && <DirectionsRenderer directions={directions} />}\n      </GoogleMap>\n    </LoadScript>\n  );\n};\n\nexport default StationMap;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}