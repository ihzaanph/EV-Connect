{"ast":null,"code":"var _jsxFileName = \"/Users/ihzaan/Documents/GitHub/EV-Connect/frontend/src/components/StationMap.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport \"../styles/StationMap.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst NearbyStations = () => {\n  _s();\n  const [userLocation, setUserLocation] = useState(null);\n  const [stations, setStations] = useState([]);\n  const [nearbyStations, setNearbyStations] = useState([]);\n  const RADIUS_KM = 3; // Change this to the desired search radius\n\n  useEffect(() => {\n    getUserLocation();\n  }, []);\n\n  // Get User's Current Location\n  const getUserLocation = () => {\n    if (\"geolocation\" in navigator) {\n      navigator.geolocation.getCurrentPosition(position => {\n        const {\n          latitude,\n          longitude\n        } = position.coords;\n        console.log(latitude);\n        console.log(longitude);\n        setUserLocation({\n          latitude,\n          longitude\n        });\n        fetchStations(latitude, longitude);\n      }, error => {\n        console.error(\"Error getting location:\", error);\n        alert(\"Please enable location services.\");\n      });\n    } else {\n      alert(\"Geolocation is not supported by your browser.\");\n    }\n  };\n\n  // Fetch Charging Stations from Database\n  const fetchStations = async (userLat, userLng) => {\n    try {\n      const response = await fetch(\"http://localhost:5006/api/stations/view\"); // Adjust API route\n      const data = await response.json();\n      setStations(data);\n      //console.log(data);\n\n      // Filter Nearby Stations\n      const filteredStations = data.filter(station => calculateDistance(userLat, userLng, stations.latitude, stations.longitude) <= RADIUS_KM);\n      console.log(filteredStations);\n      setNearbyStations(filteredStations);\n    } catch (error) {\n      console.error(\"Error fetching stations:\", error);\n    }\n  };\n\n  // Haversine Formula to Calculate Distance Between Two Coordinates\n  const calculateDistance = (lat1, lon1, lat2, lon2) => {\n    const toRad = angle => angle * Math.PI / 180;\n    const R = 6371; // Earth’s radius in km\n    const dLat = toRad(lat2 - lat1);\n    const dLon = toRad(lon2 - lon1);\n    const a = Math.sin(dLat / 2) * Math.sin(dLat / 2) + Math.cos(toRad(lat1)) * Math.cos(toRad(lat2)) * Math.sin(dLon / 2) * Math.sin(dLon / 2);\n    const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\n    return R * c; // Distance in km\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"nearby-stations-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Nearby Charging Stations\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 7\n    }, this), userLocation ? /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Your Location: \", userLocation.latitude.toFixed(4), \", \", userLocation.longitude.toFixed(4)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Fetching location...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      className: \"stations-list\",\n      children: nearbyStations.length > 0 ? nearbyStations.map(station => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n          children: station.name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 85,\n          columnNumber: 15\n        }, this), \" - \", station.distance.toFixed(2), \" km away\"]\n      }, station._id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 13\n      }, this)) : /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"No charging stations found within \", RADIUS_KM, \" km.\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 71,\n    columnNumber: 5\n  }, this);\n};\n_s(NearbyStations, \"O9Y+KD2OmR6p3wNcsqYksx7ttvc=\");\n_c = NearbyStations;\nexport default NearbyStations;\nvar _c;\n$RefreshReg$(_c, \"NearbyStations\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","NearbyStations","_s","userLocation","setUserLocation","stations","setStations","nearbyStations","setNearbyStations","RADIUS_KM","getUserLocation","navigator","geolocation","getCurrentPosition","position","latitude","longitude","coords","console","log","fetchStations","error","alert","userLat","userLng","response","fetch","data","json","filteredStations","filter","station","calculateDistance","lat1","lon1","lat2","lon2","toRad","angle","Math","PI","R","dLat","dLon","a","sin","cos","c","atan2","sqrt","className","children","fileName","_jsxFileName","lineNumber","columnNumber","toFixed","length","map","name","distance","_id","_c","$RefreshReg$"],"sources":["/Users/ihzaan/Documents/GitHub/EV-Connect/frontend/src/components/StationMap.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport \"../styles/StationMap.css\";\n\nconst NearbyStations = () => {\n  const [userLocation, setUserLocation] = useState(null);\n  const [stations, setStations] = useState([]);\n  const [nearbyStations, setNearbyStations] = useState([]);\n  const RADIUS_KM = 3; // Change this to the desired search radius\n\n  useEffect(() => {\n    getUserLocation();\n  }, []);\n\n  // Get User's Current Location\n  const getUserLocation = () => {\n    if (\"geolocation\" in navigator) {\n      navigator.geolocation.getCurrentPosition(\n        (position) => {\n          const { latitude, longitude } = position.coords;\n          console.log(latitude);\n          console.log(longitude);\n          setUserLocation({ latitude, longitude });\n          fetchStations(latitude, longitude);\n        },\n        (error) => {\n          console.error(\"Error getting location:\", error);\n          alert(\"Please enable location services.\");\n        }\n      );\n    } else {\n      alert(\"Geolocation is not supported by your browser.\");\n    }\n  };\n\n  // Fetch Charging Stations from Database\n  const fetchStations = async (userLat, userLng) => {\n    try {\n      const response = await fetch(\"http://localhost:5006/api/stations/view\"); // Adjust API route\n      const data = await response.json();\n      setStations(data);\n      //console.log(data);\n\n      // Filter Nearby Stations\n      const filteredStations = data.filter((station) =>\n        calculateDistance(userLat, userLng, stations.latitude, stations.longitude) <= RADIUS_KM\n      \n      );\n      console.log(filteredStations);\n\n      setNearbyStations(filteredStations);\n    } catch (error) {\n      console.error(\"Error fetching stations:\", error);\n    }\n  };\n\n  // Haversine Formula to Calculate Distance Between Two Coordinates\n  const calculateDistance = (lat1, lon1, lat2, lon2) => {\n    const toRad = (angle) => (angle * Math.PI) / 180;\n    const R = 6371; // Earth’s radius in km\n    const dLat = toRad(lat2 - lat1);\n    const dLon = toRad(lon2 - lon1);\n    const a =\n      Math.sin(dLat / 2) * Math.sin(dLat / 2) +\n      Math.cos(toRad(lat1)) * Math.cos(toRad(lat2)) *\n      Math.sin(dLon / 2) * Math.sin(dLon / 2);\n    const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\n    return R * c; // Distance in km\n  };\n\n  return (\n    <div className=\"nearby-stations-container\">\n      <h2>Nearby Charging Stations</h2>\n      {userLocation ? (\n        <p>\n          Your Location: {userLocation.latitude.toFixed(4)}, {userLocation.longitude.toFixed(4)}\n        </p>\n      ) : (\n        <p>Fetching location...</p>\n      )}\n\n      <ul className=\"stations-list\">\n        {nearbyStations.length > 0 ? (\n          nearbyStations.map((station) => (\n            <li key={station._id}>\n              <strong>{station.name}</strong> - {station.distance.toFixed(2)} km away\n            </li>\n          ))\n        ) : (\n          <p>No charging stations found within {RADIUS_KM} km.</p>\n        )}\n      </ul>\n    </div>\n  );\n};\n\nexport default NearbyStations;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}