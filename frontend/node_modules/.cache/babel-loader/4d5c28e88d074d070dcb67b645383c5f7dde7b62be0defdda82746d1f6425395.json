{"ast":null,"code":"var _jsxFileName = \"/Users/ihzaan/Documents/GitHub/EV-Connect/frontend/src/components/ViewstationEVuser.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport { GoogleMap, LoadScript, Marker, InfoWindow } from \"@react-google-maps/api\";\nimport { useNavigate } from \"react-router-dom\"; // Import useNavigate\nimport \"../styles/ViewstaEVuser.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ViewStations = () => {\n  _s();\n  const [stations, setStations] = useState([]);\n  const [selectedStation, setSelectedStation] = useState(null);\n  const [userLocation, setUserLocation] = useState(null);\n  const navigate = useNavigate(); // For navigation\n\n  useEffect(() => {\n    fetchStations();\n    getUserLocation();\n  }, []);\n\n  // Fetch Charging Stations\n  const fetchStations = async () => {\n    try {\n      const response = await fetch(\"http://localhost:5006/api/charging-stations-evuser\");\n      const data = await response.json();\n      setStations(data);\n    } catch (error) {\n      console.error(\"Error fetching stations:\", error);\n    }\n  };\n\n  // Get User's Current Location\n  const getUserLocation = () => {\n    if (navigator.geolocation) {\n      navigator.geolocation.getCurrentPosition(position => {\n        setUserLocation({\n          lat: position.coords.latitude,\n          lng: position.coords.longitude\n        });\n      }, error => {\n        console.error(\"Error getting user location:\", error);\n      });\n    } else {\n      console.error(\"Geolocation is not supported by this browser.\");\n    }\n  };\n\n  // Open Google Maps for Directions\n  const openGoogleMaps = (lat, lng) => {\n    if (userLocation) {\n      const url = `https://www.google.com/maps/dir/?api=1&origin=${userLocation.lat},${userLocation.lng}&destination=${lat},${lng}&travelmode=driving`;\n      window.open(url, \"_blank\");\n    } else {\n      alert(\"Unable to get your location.\");\n    }\n  };\n\n  // Navigate to Booking Page\n  const goToBookingPage = stationId => {\n    navigate(`/book/${stationId}`); // Navigate to the booking page of the selected station\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"view-stations-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Find Nearby Charging Stations\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"map-box\",\n      children: /*#__PURE__*/_jsxDEV(LoadScript, {\n        googleMapsApiKey: \"AIzaSyAS9zfp0wdczlh-d1WDk1VHAbsTrhsDg-E\",\n        children: /*#__PURE__*/_jsxDEV(GoogleMap, {\n          mapContainerClassName: \"map-container\",\n          center: userLocation || {\n            lat: 10.0,\n            lng: 76.0\n          } // Default center if user location is unavailable\n          ,\n          zoom: 10,\n          children: [userLocation && /*#__PURE__*/_jsxDEV(Marker, {\n            position: userLocation,\n            icon: {\n              url: \"http://maps.google.com/mapfiles/ms/icons/blue-dot.png\",\n              scaledSize: {\n                width: 40,\n                height: 40\n              }\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 74,\n            columnNumber: 15\n          }, this), stations.map(station => /*#__PURE__*/_jsxDEV(Marker, {\n            position: {\n              lat: station.latitude,\n              lng: station.longitude\n            },\n            onClick: () => setSelectedStation(station)\n          }, station._id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 85,\n            columnNumber: 15\n          }, this)), selectedStation && /*#__PURE__*/_jsxDEV(InfoWindow, {\n            position: {\n              lat: selectedStation.latitude,\n              lng: selectedStation.longitude\n            },\n            onCloseClick: () => setSelectedStation(null),\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"info-window\",\n              children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n                children: selectedStation.name\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 99,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                children: [\"Status: \", /*#__PURE__*/_jsxDEV(\"span\", {\n                  className: selectedStation.operationalStatus === \"active\" ? \"active\" : \"inactive\",\n                  children: selectedStation.operationalStatus\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 100,\n                  columnNumber: 30\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 100,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                className: \"direction-btn\",\n                onClick: () => openGoogleMaps(selectedStation.latitude, selectedStation.longitude),\n                children: \"Get Directions\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 103,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                className: \"book-btn\",\n                onClick: () => goToBookingPage(selectedStation._id),\n                children: \"Book Now\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 109,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 98,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 94,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 67,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 63,\n    columnNumber: 5\n  }, this);\n};\n_s(ViewStations, \"xfp4HpiUJ/MZH02VTm7CNG5UJAo=\", false, function () {\n  return [useNavigate];\n});\n_c = ViewStations;\nexport default ViewStations;\nvar _c;\n$RefreshReg$(_c, \"ViewStations\");","map":{"version":3,"names":["React","useState","useEffect","GoogleMap","LoadScript","Marker","InfoWindow","useNavigate","jsxDEV","_jsxDEV","ViewStations","_s","stations","setStations","selectedStation","setSelectedStation","userLocation","setUserLocation","navigate","fetchStations","getUserLocation","response","fetch","data","json","error","console","navigator","geolocation","getCurrentPosition","position","lat","coords","latitude","lng","longitude","openGoogleMaps","url","window","open","alert","goToBookingPage","stationId","className","children","fileName","_jsxFileName","lineNumber","columnNumber","googleMapsApiKey","mapContainerClassName","center","zoom","icon","scaledSize","width","height","map","station","onClick","_id","onCloseClick","name","operationalStatus","_c","$RefreshReg$"],"sources":["/Users/ihzaan/Documents/GitHub/EV-Connect/frontend/src/components/ViewstationEVuser.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { GoogleMap, LoadScript, Marker, InfoWindow } from \"@react-google-maps/api\";\nimport { useNavigate } from \"react-router-dom\"; // Import useNavigate\nimport \"../styles/ViewstaEVuser.css\";\n\nconst ViewStations = () => {\n  const [stations, setStations] = useState([]);\n  const [selectedStation, setSelectedStation] = useState(null);\n  const [userLocation, setUserLocation] = useState(null);\n  const navigate = useNavigate(); // For navigation\n\n  useEffect(() => {\n    fetchStations();\n    getUserLocation();\n  }, []);\n\n  // Fetch Charging Stations\n  const fetchStations = async () => {\n    try {\n      const response = await fetch(\"http://localhost:5006/api/charging-stations-evuser\");\n      const data = await response.json();\n      setStations(data);\n    } catch (error) {\n      console.error(\"Error fetching stations:\", error);\n    }\n  };\n\n  // Get User's Current Location\n  const getUserLocation = () => {\n    if (navigator.geolocation) {\n      navigator.geolocation.getCurrentPosition(\n        (position) => {\n          setUserLocation({\n            lat: position.coords.latitude,\n            lng: position.coords.longitude,\n          });\n        },\n        (error) => {\n          console.error(\"Error getting user location:\", error);\n        }\n      );\n    } else {\n      console.error(\"Geolocation is not supported by this browser.\");\n    }\n  };\n\n  // Open Google Maps for Directions\n  const openGoogleMaps = (lat, lng) => {\n    if (userLocation) {\n      const url = `https://www.google.com/maps/dir/?api=1&origin=${userLocation.lat},${userLocation.lng}&destination=${lat},${lng}&travelmode=driving`;\n      window.open(url, \"_blank\");\n    } else {\n      alert(\"Unable to get your location.\");\n    }\n  };\n\n  // Navigate to Booking Page\n  const goToBookingPage = (stationId) => {\n    navigate(`/book/${stationId}`); // Navigate to the booking page of the selected station\n  };\n\n  return (\n    <div className=\"view-stations-container\">\n      <h2>Find Nearby Charging Stations</h2>\n      <div className=\"map-box\">\n        <LoadScript googleMapsApiKey=\"AIzaSyAS9zfp0wdczlh-d1WDk1VHAbsTrhsDg-E\">\n          <GoogleMap\n            mapContainerClassName=\"map-container\"\n            center={userLocation || { lat: 10.0, lng: 76.0 }} // Default center if user location is unavailable\n            zoom={10}\n          >\n            {/* User's Location Marker */}\n            {userLocation && (\n              <Marker\n                position={userLocation}\n                icon={{\n                  url: \"http://maps.google.com/mapfiles/ms/icons/blue-dot.png\",\n                  scaledSize: { width: 40, height: 40 },\n                }}\n              />\n            )}\n\n            {/* Charging Station Markers */}\n            {stations.map((station) => (\n              <Marker\n                key={station._id}\n                position={{ lat: station.latitude, lng: station.longitude }}\n                onClick={() => setSelectedStation(station)}\n              />\n            ))}\n\n            {/* Info Window for Selected Station */}\n            {selectedStation && (\n              <InfoWindow\n                position={{ lat: selectedStation.latitude, lng: selectedStation.longitude }}\n                onCloseClick={() => setSelectedStation(null)}\n              >\n                <div className=\"info-window\">\n                  <h4>{selectedStation.name}</h4>\n                  <p>Status: <span className={selectedStation.operationalStatus === \"active\" ? \"active\" : \"inactive\"}>\n                    {selectedStation.operationalStatus}\n                  </span></p>\n                  <button\n                    className=\"direction-btn\"\n                    onClick={() => openGoogleMaps(selectedStation.latitude, selectedStation.longitude)}\n                  >\n                    Get Directions\n                  </button>\n                  <button\n                    className=\"book-btn\"\n                    onClick={() => goToBookingPage(selectedStation._id)}\n                  >\n                    Book Now\n                  </button>\n                </div>\n              </InfoWindow>\n            )}\n          </GoogleMap>\n        </LoadScript>\n      </div>\n    </div>\n  );\n};\n\nexport default ViewStations;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}