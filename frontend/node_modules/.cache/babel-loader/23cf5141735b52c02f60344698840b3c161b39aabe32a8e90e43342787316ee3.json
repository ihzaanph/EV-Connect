{"ast":null,"code":"var _jsxFileName = \"/Users/ihzaan/Documents/GitHub/EV-Connect/frontend/src/components/UpdateStation.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport { useParams, useNavigate } from \"react-router-dom\";\nimport { GoogleMap, LoadScript, Marker } from \"@react-google-maps/api\";\nimport \"../styles/UpdateStation.css\";\n\n// Google Maps API Key\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst GOOGLE_MAPS_API_KEY = \"AIzaSyAS9zfp0wdczlh-d1WDk1VHAbsTrhsDg-E\";\nconst UpdateStation = () => {\n  _s();\n  const {\n    id\n  } = useParams(); // Get station ID from URL\n  const navigate = useNavigate();\n  const [formData, setFormData] = useState({\n    name: \"\",\n    latitude: \"\",\n    longitude: \"\",\n    slots: \"\"\n  });\n  useEffect(() => {\n    fetchStationDetails();\n  }, []);\n\n  // 📌 Fetch the current station details\n  const fetchStationDetails = async () => {\n    try {\n      const response = await fetch(`http://localhost:5006/api/stations}`);\n      const data = await response.json();\n      setFormData({\n        name: data.name,\n        latitude: data.latitude,\n        longitude: data.longitude,\n        slots: data.slots\n      });\n    } catch (error) {\n      console.error(\"Error fetching station details:\", error);\n    }\n  };\n\n  // 📌 Handle form input change\n  const handleChange = e => {\n    setFormData({\n      ...formData,\n      [e.target.name]: e.target.value\n    });\n  };\n\n  // 📌 Use Current Location for Latitude & Longitude\n  const useCurrentLocation = () => {\n    if (navigator.geolocation) {\n      navigator.geolocation.getCurrentPosition(position => {\n        const lat = position.coords.latitude;\n        const lng = position.coords.longitude;\n        setFormData({\n          ...formData,\n          latitude: lat,\n          longitude: lng\n        });\n      }, error => {\n        console.error(\"Error getting location:\", error);\n      });\n    } else {\n      alert(\"Geolocation is not supported by this browser.\");\n    }\n  };\n\n  // 📌 Handle map click to update latitude & longitude\n  const handleMapClick = event => {\n    const lat = event.latLng.lat();\n    const lng = event.latLng.lng();\n    setFormData({\n      ...formData,\n      latitude: lat,\n      longitude: lng\n    });\n  };\n\n  // 📌 Handle station update\n  const handleUpdate = async e => {\n    e.preventDefault();\n    try {\n      const response = await fetch(`http://localhost:5006/api/stations/update/${id}`, {\n        method: \"PUT\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify(formData)\n      });\n      if (response.ok) {\n        alert(\"Station updated successfully!\");\n        navigate(\"/manage-stations\"); // Redirect back to Manage Stations\n      } else {\n        alert(\"Failed to update station.\");\n      }\n    } catch (error) {\n      console.error(\"Error updating station:\", error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"mainn\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"update-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Update Charging Station\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n        onSubmit: handleUpdate,\n        className: \"update-form\",\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          name: \"name\",\n          placeholder: \"Station Name\",\n          value: formData.name,\n          onChange: handleChange,\n          required: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 96,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"number\",\n          name: \"slots\",\n          placeholder: \"Total Slots\",\n          value: formData.slots,\n          onChange: handleChange,\n          required: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 97,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"button\",\n          onClick: useCurrentLocation,\n          className: \"location-btn\",\n          children: \"\\uD83D\\uDCCD Use Current Location\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 100,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(LoadScript, {\n          googleMapsApiKey: GOOGLE_MAPS_API_KEY,\n          children: /*#__PURE__*/_jsxDEV(GoogleMap, {\n            mapContainerClassName: \"map-container\",\n            center: formData.latitude && formData.longitude ? {\n              lat: parseFloat(formData.latitude),\n              lng: parseFloat(formData.longitude)\n            } : {\n              lat: 10.0,\n              lng: 76.0\n            },\n            zoom: 10,\n            onClick: handleMapClick,\n            children: formData.latitude && formData.longitude && /*#__PURE__*/_jsxDEV(Marker, {\n              position: {\n                lat: parseFloat(formData.latitude),\n                lng: parseFloat(formData.longitude)\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 113,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 106,\n            columnNumber: 11\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 105,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Selected Location: \", formData.latitude, \", \", formData.longitude]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 118,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"submit\",\n          className: \"update-btn\",\n          children: \"Update Station\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 120,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 5\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 92,\n    columnNumber: 3\n  }, this);\n};\n_s(UpdateStation, \"cBUpFAlt7dXx+AsvYogoOzGUt88=\", false, function () {\n  return [useParams, useNavigate];\n});\n_c = UpdateStation;\nexport default UpdateStation;\nvar _c;\n$RefreshReg$(_c, \"UpdateStation\");","map":{"version":3,"names":["React","useState","useEffect","useParams","useNavigate","GoogleMap","LoadScript","Marker","jsxDEV","_jsxDEV","GOOGLE_MAPS_API_KEY","UpdateStation","_s","id","navigate","formData","setFormData","name","latitude","longitude","slots","fetchStationDetails","response","fetch","data","json","error","console","handleChange","e","target","value","useCurrentLocation","navigator","geolocation","getCurrentPosition","position","lat","coords","lng","alert","handleMapClick","event","latLng","handleUpdate","preventDefault","method","headers","body","JSON","stringify","ok","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onSubmit","type","placeholder","onChange","required","onClick","googleMapsApiKey","mapContainerClassName","center","parseFloat","zoom","_c","$RefreshReg$"],"sources":["/Users/ihzaan/Documents/GitHub/EV-Connect/frontend/src/components/UpdateStation.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { useParams, useNavigate } from \"react-router-dom\";\nimport { GoogleMap, LoadScript, Marker } from \"@react-google-maps/api\";\nimport \"../styles/UpdateStation.css\";\n\n// Google Maps API Key\nconst GOOGLE_MAPS_API_KEY = \"AIzaSyAS9zfp0wdczlh-d1WDk1VHAbsTrhsDg-E\";\n\nconst UpdateStation = () => {\n  const { id } = useParams(); // Get station ID from URL\n  const navigate = useNavigate();\n  const [formData, setFormData] = useState({\n    name: \"\",\n    latitude: \"\",\n    longitude: \"\",\n    slots: \"\",\n  });\n\n  useEffect(() => {\n    fetchStationDetails();\n  }, []);\n\n  // 📌 Fetch the current station details\n  const fetchStationDetails = async () => {\n    try {\n      const response = await fetch(`http://localhost:5006/api/stations}`);\n      const data = await response.json();\n      setFormData({\n        name: data.name,\n        latitude: data.latitude,\n        longitude: data.longitude,\n        slots: data.slots,\n      });\n    } catch (error) {\n      console.error(\"Error fetching station details:\", error);\n    }\n  };\n\n  // 📌 Handle form input change\n  const handleChange = (e) => {\n    setFormData({ ...formData, [e.target.name]: e.target.value });\n  };\n\n  // 📌 Use Current Location for Latitude & Longitude\n  const useCurrentLocation = () => {\n    if (navigator.geolocation) {\n      navigator.geolocation.getCurrentPosition(\n        (position) => {\n          const lat = position.coords.latitude;\n          const lng = position.coords.longitude;\n          setFormData({ ...formData, latitude: lat, longitude: lng });\n        },\n        (error) => {\n          console.error(\"Error getting location:\", error);\n        }\n      );\n    } else {\n      alert(\"Geolocation is not supported by this browser.\");\n    }\n  };\n\n  // 📌 Handle map click to update latitude & longitude\n  const handleMapClick = (event) => {\n    const lat = event.latLng.lat();\n    const lng = event.latLng.lng();\n    setFormData({ ...formData, latitude: lat, longitude: lng });\n  };\n\n  // 📌 Handle station update\n  const handleUpdate = async (e) => {\n    e.preventDefault();\n\n    try {\n      const response = await fetch(`http://localhost:5006/api/stations/update/${id}`, {\n        method: \"PUT\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify(formData),\n      });\n\n      if (response.ok) {\n        alert(\"Station updated successfully!\");\n        navigate(\"/manage-stations\"); // Redirect back to Manage Stations\n      } else {\n        alert(\"Failed to update station.\");\n      }\n    } catch (error) {\n      console.error(\"Error updating station:\", error);\n    }\n  };\n\n  return (\n  <div className=\"mainn\">\n    <div className=\"update-container\">\n      <h2>Update Charging Station</h2>\n      <form onSubmit={handleUpdate} className=\"update-form\">\n        <input type=\"text\" name=\"name\" placeholder=\"Station Name\" value={formData.name} onChange={handleChange} required />\n        <input type=\"number\" name=\"slots\" placeholder=\"Total Slots\" value={formData.slots} onChange={handleChange} required />\n\n        {/* Use Current Location Button */}\n        <button type=\"button\" onClick={useCurrentLocation} className=\"location-btn\">\n          📍 Use Current Location\n        </button>\n\n        {/* Google Map for Selecting Location */}\n        <LoadScript googleMapsApiKey={GOOGLE_MAPS_API_KEY}>\n          <GoogleMap\n            mapContainerClassName=\"map-container\"\n            center={formData.latitude && formData.longitude ? { lat: parseFloat(formData.latitude), lng: parseFloat(formData.longitude) } : { lat: 10.0, lng: 76.0 }}\n            zoom={10}\n            onClick={handleMapClick}\n          >\n            {formData.latitude && formData.longitude && (\n              <Marker position={{ lat: parseFloat(formData.latitude), lng: parseFloat(formData.longitude) }} />\n            )}\n          </GoogleMap>\n        </LoadScript>\n\n        <p>Selected Location: {formData.latitude}, {formData.longitude}</p>\n\n        <button type=\"submit\" className=\"update-btn\">Update Station</button>\n      </form>\n    </div>\n    </div>\n  );\n};\n\nexport default UpdateStation;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}